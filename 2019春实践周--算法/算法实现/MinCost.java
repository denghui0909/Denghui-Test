import java.util.Scanner;

//Commodity类是购买商品类,拥有商品的购买数量和价格属性
class Commodity{		
    int piece;		//购买数量
    int price;		//购买价格
}

public class MinCost { 
	private static int MAXCODE = 999;		//商品编码的最大值 
	private static int SALECOMB = 99;		//优惠商品组合数
	private static int KIND = 5; 			//商品种类
	private static int QUANTITY = 5; 		//购买某种商品数量的最大值 
	private static int b;					//购买商品种类数 
	private static int s;					//当前优惠组合数 
	
	private static int[] num = new int[MAXCODE+1];				//记录商品编码与商品种类的对应关系
	private static int[] product = new int[KIND+1];				//记录当前不同种类商品的购买数量 
	private static int[][] offer = new int[SALECOMB+1][KIND+1];	//offer[i][j]: 商品组合的优惠价(j=0)；某种优惠组合中某种商品需要购买的数量(j>0)
	private static Commodity[] purch = new Commodity[KIND+1];	//记录不同商品的购买数量和购买价格 
	private static int[][][][][] cost = new int[QUANTITY+1][QUANTITY+1][QUANTITY+1][QUANTITY+1][QUANTITY+1];		//记录本次购买的总花费


	 public static void main(String[] args){ 
		 init();    //初始化
		 comp(1); 	
		 out();     //输出
	}
	 
	 //初始化方法
	 private static void init(){ 
		 Scanner input = new Scanner(System.in);
		 int i,j,n,p,t,code; 
		 
		 //初始化
		 for(i=0; i<100; i++)   
			 for(j=0; j<6; j++) 
				 offer[i][j] = 0; 
		 
		 //purch[]记录不同商品的购买数量和购买价格
		 for(i=0; i<6; i++){ 
			 purch[i] = new Commodity();
			 purch[i].piece = 0; 	//初始化商品数量
			 purch[i].price = 0;    //初始化商品价格
			 product[i] = 0; 		//初始化当前该种类商品的购买数量 
		 } 
		 
		 b = input.nextInt();		//输入数字b，表示所购商品种类数
		 
		 //根据输入的种类数，依次读取第i种商品的商品编码、数量、价格
		 for(i=1; i<=b; i++){ 
			 code = input.nextInt(); 
			 purch[i].piece = input.nextInt();
			 purch[i].price = input.nextInt(); 
			 
			 num[code] = i; 		//数组num记录商品编码与商品种类的对应关系
		 } 
		 
		 s = input.nextInt();		//输入拥有的优惠组合种类数s
		  
		 for(i=1; i<=s; i++){ 
			 t = input.nextInt(); 		 //输入第i种优惠商品的组合中商品的种类数
			 
			 //根据输入的种类数，依次读取第i种商品的商品编码、数量
			 for(j=1; j<=t; j++){
				 n = input.nextInt(); 	
				 p = input.nextInt(); 
				 
				 offer[i][num[n]] = p; 	 //offer[i][j]: 第i种优惠组合中第j种商品需要购买的数量(j>0)
			 } 
			 
			 offer[i][0] = input.nextInt(); 		//offer[i][0]用来记录第i种商品组合的优惠后价格
		 } 
	 }
	 
	 //将待求解的问题分解成若干个相互联系的子问题，按顺序求解各子问题，最后一个子问题就是初始问题的解
	 private static void comp(int i){ 		//传入的i=1，默认从第一种商品开始购买
		 
		 if(i > b){ 
			 minicost();
		 	 return; 
		 } 
		 
		 for(int j=0; j<=purch[i].piece; j++){   //purch[i].piece表示第i种商品的购买数量
			 product[i] = j; 			//设置第i种商品的购买数量 为j
			 comp(i+1);    
		 } 
	 } 
	 
	 //动态规划算法求解出最少费用
	 private static void minicost(){
		 
		 int i,j,k,m,n,p,minm;
		 minm = 0; 
		 
		 /* product[]记录不同种类商品的购买数量
		  * purch[]记录不同商品的购买数量和购买价格
		  * offer[i][j]: 第i种优惠组合中第j种商品需要购买的数量(j>0)
		  * cost数组记录本次购买的总花费
		  */
		 
		 //记录购买商品i所需要的最大花费，即没有任何优惠组合方案时的花费
		 for(i=1; i<=b; i++) {
			 minm += product[i]*purch[i].price;	
		 }
		 
		 for(p=1; p<=s; p++){ 		//p用来记录当前的第p种优惠方案
			 i = product[1] - offer[p][1]; 		//当前购买的第1种商品的数量 - 第p种组合中第一种商品的数量 = 剩余需要原价购买的商品数量			 
			 j = product[2] - offer[p][2];		
			 k = product[3] - offer[p][3]; 		
			 m = product[4] - offer[p][4]; 		
			 n = product[5] - offer[p][5];		
			 
			 //当所需购物数量满足（大于等于）优惠组合数时，则更新当前组合的最低花费
			 if(i>=0 && j>=0 && k>=0 && m>=0 && n>=0 && cost[i][j][k][m][n]+offer[p][0] < minm) 
				 minm = cost[i][j][k][m][n] + offer[p][0];
		 } 
		
		 //更新购买产品数量的花费
		 cost[product[1]][product[2]][product[3]][product[4]][product[5]] = minm; 
	 } 
	 
	 private static void out(){ 
		 System.out.println("本次购买物品的最少费用为："+cost[product[1]][product[2]][product[3]][product[4]][product[5]]+"元"); 
	} 
	 
}
